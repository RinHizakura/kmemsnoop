// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
#[warn(single_use_lifetimes)]
mod imp {
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;

    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("memwatch_bpf")
            .map("memwatch.rodata", false)
            .prog("perf_event_handler");

        builder.build()
    }

    #[derive(Default)]
    pub struct MemwatchSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> SkelBuilder<'a> for MemwatchSkelBuilder {
        type Output = OpenMemwatchSkel<'a>;
        fn open(self) -> libbpf_rs::Result<OpenMemwatchSkel<'a>> {
            let opts = *self.obj_builder.opts();
            self.open_opts(opts)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenMemwatchSkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            #[allow(unused_mut)]
            let mut skel = OpenMemwatchSkel {
                obj,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    pub struct OpenMemwatchMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenMemwatchMapsMut<'_> {
        pub fn rodata(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("memwatch.rodata").unwrap()
        }
    }

    pub struct OpenMemwatchMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenMemwatchMaps<'_> {
        pub fn rodata(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("memwatch.rodata").unwrap()
        }
    }

    pub struct OpenMemwatchProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenMemwatchProgs<'_> {
        pub fn perf_event_handler(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("perf_event_handler").unwrap()
        }
    }

    pub struct OpenMemwatchProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenMemwatchProgsMut<'_> {
        pub fn perf_event_handler(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("perf_event_handler").unwrap()
        }
    }

    pub mod memwatch_types {
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}

        #[derive(Debug, Clone)]
        #[repr(C)]
        pub struct struct_ops {}

        impl struct_ops {}
    }

    pub struct OpenMemwatchSkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        pub struct_ops: memwatch_types::struct_ops,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenSkel for OpenMemwatchSkel<'a> {
        type Output = MemwatchSkel<'a>;
        fn load(mut self) -> libbpf_rs::Result<MemwatchSkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(MemwatchSkel {
                obj,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: MemwatchLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            &self.obj
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            &mut self.obj
        }
    }
    impl OpenMemwatchSkel<'_> {
        pub fn progs_mut(&mut self) -> OpenMemwatchProgsMut<'_> {
            OpenMemwatchProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn progs(&self) -> OpenMemwatchProgs<'_> {
            OpenMemwatchProgs { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenMemwatchMapsMut<'_> {
            OpenMemwatchMapsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenMemwatchMaps<'_> {
            OpenMemwatchMaps { inner: &self.obj }
        }
    }

    pub struct MemwatchMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl MemwatchMapsMut<'_> {
        pub fn rodata(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("memwatch.rodata").unwrap()
        }
    }

    pub struct MemwatchMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl MemwatchMaps<'_> {
        pub fn rodata(&self) -> &libbpf_rs::Map {
            self.inner.map("memwatch.rodata").unwrap()
        }
    }

    pub struct MemwatchProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl MemwatchProgs<'_> {
        pub fn perf_event_handler(&self) -> &libbpf_rs::Program {
            self.inner.prog("perf_event_handler").unwrap()
        }
    }

    pub struct MemwatchProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl MemwatchProgsMut<'_> {
        pub fn perf_event_handler(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("perf_event_handler").unwrap()
        }
    }

    #[derive(Default)]
    pub struct MemwatchLinks {
        pub perf_event_handler: Option<libbpf_rs::Link>,
    }

    pub struct MemwatchSkel<'a> {
        pub obj: libbpf_rs::Object,
        struct_ops: memwatch_types::struct_ops,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
        pub links: MemwatchLinks,
    }

    unsafe impl Send for MemwatchSkel<'_> {}
    unsafe impl Sync for MemwatchSkel<'_> {}

    impl Skel for MemwatchSkel<'_> {
        fn object(&self) -> &libbpf_rs::Object {
            &self.obj
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            &mut self.obj
        }

        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = MemwatchLinks {
                perf_event_handler: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl MemwatchSkel<'_> {
        pub fn progs_mut(&mut self) -> MemwatchProgsMut<'_> {
            MemwatchProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn progs(&self) -> MemwatchProgs<'_> {
            MemwatchProgs { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> MemwatchMapsMut<'_> {
            MemwatchMapsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> MemwatchMaps<'_> {
            MemwatchMaps { inner: &self.obj }
        }

        pub fn struct_ops_raw(&self) -> *const memwatch_types::struct_ops {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &memwatch_types::struct_ops {
            &self.struct_ops
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 9, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97, 98,
        0, 112, 101, 114, 102, 95, 101, 118, 101, 110, 116, 0, 46, 114, 111, 100, 97, 116, 97, 0,
        108, 105, 99, 101, 110, 115, 101, 0, 109, 101, 109, 119, 97, 116, 99, 104, 46, 98, 112,
        102, 46, 99, 0, 112, 101, 114, 102, 95, 101, 118, 101, 110, 116, 95, 104, 97, 110, 100,
        108, 101, 114, 46, 95, 95, 95, 95, 102, 109, 116, 0, 112, 101, 114, 102, 95, 101, 118, 101,
        110, 116, 95, 104, 97, 110, 100, 108, 101, 114, 0, 76, 73, 67, 69, 78, 83, 69, 0, 46, 114,
        101, 108, 112, 101, 114, 102, 95, 101, 118, 101, 110, 116, 0, 46, 66, 84, 70, 0, 46, 66,
        84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 1,
        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        56, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0,
        0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 14, 0, 0, 0, 183,
        3, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
        0, 0, 0, 80, 69, 82, 70, 95, 69, 86, 69, 78, 84, 32, 37, 100, 0, 71, 80, 76, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0,
        0, 0, 2, 0, 0, 0, 2, 0, 0, 60, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1, 0, 0, 0, 21,
        0, 0, 4, 168, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 3, 0, 0, 0, 64, 0,
        0, 0, 17, 0, 0, 0, 3, 0, 0, 0, 128, 0, 0, 0, 21, 0, 0, 0, 3, 0, 0, 0, 192, 0, 0, 0, 25, 0,
        0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 28, 0, 0, 0, 3, 0, 0, 0, 64, 1, 0, 0, 31, 0, 0, 0, 3, 0, 0,
        0, 128, 1, 0, 0, 35, 0, 0, 0, 3, 0, 0, 0, 192, 1, 0, 0, 39, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0,
        0, 42, 0, 0, 0, 3, 0, 0, 0, 64, 2, 0, 0, 45, 0, 0, 0, 3, 0, 0, 0, 128, 2, 0, 0, 48, 0, 0,
        0, 3, 0, 0, 0, 192, 2, 0, 0, 51, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 54, 0, 0, 0, 3, 0, 0, 0,
        64, 3, 0, 0, 57, 0, 0, 0, 3, 0, 0, 0, 128, 3, 0, 0, 60, 0, 0, 0, 3, 0, 0, 0, 192, 3, 0, 0,
        68, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 71, 0, 0, 0, 3, 0, 0, 0, 64, 4, 0, 0, 74, 0, 0, 0, 3,
        0, 0, 0, 128, 4, 0, 0, 80, 0, 0, 0, 3, 0, 0, 0, 192, 4, 0, 0, 83, 0, 0, 0, 3, 0, 0, 0, 0,
        5, 0, 0, 86, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 5, 0,
        0, 0, 100, 0, 0, 0, 1, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 108, 0,
        0, 0, 1, 0, 0, 12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 8, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 7, 0, 0, 0, 10, 0, 0, 0, 14,
        0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 14, 9,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0,
        0, 179, 0, 0, 0, 0, 0, 0, 14, 12, 0, 0, 0, 1, 0, 0, 0, 33, 1, 0, 0, 1, 0, 0, 15, 14, 0, 0,
        0, 11, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 41, 1, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0, 13, 0, 0, 0,
        0, 0, 0, 0, 4, 0, 0, 0, 0, 112, 116, 95, 114, 101, 103, 115, 0, 114, 49, 53, 0, 114, 49,
        52, 0, 114, 49, 51, 0, 114, 49, 50, 0, 98, 112, 0, 98, 120, 0, 114, 49, 49, 0, 114, 49, 48,
        0, 114, 57, 0, 114, 56, 0, 97, 120, 0, 99, 120, 0, 100, 120, 0, 115, 105, 0, 100, 105, 0,
        111, 114, 105, 103, 95, 97, 120, 0, 105, 112, 0, 99, 115, 0, 102, 108, 97, 103, 115, 0,
        115, 112, 0, 115, 115, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103,
        0, 99, 116, 120, 0, 105, 110, 116, 0, 112, 101, 114, 102, 95, 101, 118, 101, 110, 116, 95,
        104, 97, 110, 100, 108, 101, 114, 0, 99, 104, 97, 114, 0, 95, 95, 65, 82, 82, 65, 89, 95,
        83, 73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0, 112, 101, 114, 102, 95, 101, 118, 101, 110,
        116, 95, 104, 97, 110, 100, 108, 101, 114, 46, 95, 95, 95, 95, 102, 109, 116, 0, 76, 73,
        67, 69, 78, 83, 69, 0, 47, 104, 111, 109, 101, 47, 114, 111, 98, 101, 108, 105, 110, 47,
        71, 105, 116, 72, 117, 98, 47, 109, 101, 109, 119, 97, 116, 99, 104, 47, 98, 112, 102, 47,
        109, 101, 109, 119, 97, 116, 99, 104, 46, 98, 112, 102, 46, 99, 0, 32, 32, 32, 32, 98, 112,
        102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 80, 69, 82, 70, 95, 69, 86, 69, 78, 84, 32,
        37, 100, 34, 44, 32, 116, 101, 115, 116, 41, 59, 0, 32, 32, 32, 32, 114, 101, 116, 117,
        114, 110, 32, 48, 59, 0, 46, 114, 111, 100, 97, 116, 97, 0, 108, 105, 99, 101, 110, 115,
        101, 0, 112, 101, 114, 102, 95, 101, 118, 101, 110, 116, 0, 0, 0, 0, 0, 159, 235, 1, 0, 32,
        0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 44, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 8, 0,
        0, 0, 49, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 16, 0, 0, 0, 49, 1, 0, 0, 2, 0, 0,
        0, 0, 0, 0, 0, 187, 0, 0, 0, 236, 0, 0, 0, 5, 72, 0, 0, 40, 0, 0, 0, 187, 0, 0, 0, 19, 1,
        0, 0, 5, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 1, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 1,
        0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 1, 0, 0, 0, 0, 0, 0, 14, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        36, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 1, 0, 0, 0,
        0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 113, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        200, 1, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 216, 1, 0, 0, 0, 0, 0, 0, 84, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 5, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
